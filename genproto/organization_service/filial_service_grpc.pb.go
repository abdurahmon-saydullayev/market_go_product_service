// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package organization_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilialServiceClient is the client API for FilialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilialServiceClient interface {
	Create(ctx context.Context, in *CreateFilial, opts ...grpc.CallOption) (*Filial, error)
	GetByID(ctx context.Context, in *FilialPK, opts ...grpc.CallOption) (*Filial, error)
	GetList(ctx context.Context, in *GetListFilialRequest, opts ...grpc.CallOption) (*GetListFilialResponse, error)
	Update(ctx context.Context, in *UpdateFilial, opts ...grpc.CallOption) (*Filial, error)
	UpdatePatch(ctx context.Context, in *UpdatePatchFilial, opts ...grpc.CallOption) (*Filial, error)
	Delete(ctx context.Context, in *FilialPK, opts ...grpc.CallOption) (*empty.Empty, error)
}

type filialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilialServiceClient(cc grpc.ClientConnInterface) FilialServiceClient {
	return &filialServiceClient{cc}
}

func (c *filialServiceClient) Create(ctx context.Context, in *CreateFilial, opts ...grpc.CallOption) (*Filial, error) {
	out := new(Filial)
	err := c.cc.Invoke(ctx, "/organization_service.FilialService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filialServiceClient) GetByID(ctx context.Context, in *FilialPK, opts ...grpc.CallOption) (*Filial, error) {
	out := new(Filial)
	err := c.cc.Invoke(ctx, "/organization_service.FilialService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filialServiceClient) GetList(ctx context.Context, in *GetListFilialRequest, opts ...grpc.CallOption) (*GetListFilialResponse, error) {
	out := new(GetListFilialResponse)
	err := c.cc.Invoke(ctx, "/organization_service.FilialService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filialServiceClient) Update(ctx context.Context, in *UpdateFilial, opts ...grpc.CallOption) (*Filial, error) {
	out := new(Filial)
	err := c.cc.Invoke(ctx, "/organization_service.FilialService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filialServiceClient) UpdatePatch(ctx context.Context, in *UpdatePatchFilial, opts ...grpc.CallOption) (*Filial, error) {
	out := new(Filial)
	err := c.cc.Invoke(ctx, "/organization_service.FilialService/UpdatePatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filialServiceClient) Delete(ctx context.Context, in *FilialPK, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/organization_service.FilialService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilialServiceServer is the server API for FilialService service.
// All implementations must embed UnimplementedFilialServiceServer
// for forward compatibility
type FilialServiceServer interface {
	Create(context.Context, *CreateFilial) (*Filial, error)
	GetByID(context.Context, *FilialPK) (*Filial, error)
	GetList(context.Context, *GetListFilialRequest) (*GetListFilialResponse, error)
	Update(context.Context, *UpdateFilial) (*Filial, error)
	UpdatePatch(context.Context, *UpdatePatchFilial) (*Filial, error)
	Delete(context.Context, *FilialPK) (*empty.Empty, error)
	mustEmbedUnimplementedFilialServiceServer()
}

// UnimplementedFilialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilialServiceServer struct {
}

func (UnimplementedFilialServiceServer) Create(context.Context, *CreateFilial) (*Filial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFilialServiceServer) GetByID(context.Context, *FilialPK) (*Filial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedFilialServiceServer) GetList(context.Context, *GetListFilialRequest) (*GetListFilialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedFilialServiceServer) Update(context.Context, *UpdateFilial) (*Filial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFilialServiceServer) UpdatePatch(context.Context, *UpdatePatchFilial) (*Filial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatch not implemented")
}
func (UnimplementedFilialServiceServer) Delete(context.Context, *FilialPK) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFilialServiceServer) mustEmbedUnimplementedFilialServiceServer() {}

// UnsafeFilialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilialServiceServer will
// result in compilation errors.
type UnsafeFilialServiceServer interface {
	mustEmbedUnimplementedFilialServiceServer()
}

func RegisterFilialServiceServer(s grpc.ServiceRegistrar, srv FilialServiceServer) {
	s.RegisterService(&FilialService_ServiceDesc, srv)
}

func _FilialService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilialServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.FilialService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilialServiceServer).Create(ctx, req.(*CreateFilial))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilialService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilialPK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilialServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.FilialService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilialServiceServer).GetByID(ctx, req.(*FilialPK))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilialService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFilialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilialServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.FilialService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilialServiceServer).GetList(ctx, req.(*GetListFilialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilialService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilialServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.FilialService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilialServiceServer).Update(ctx, req.(*UpdateFilial))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilialService_UpdatePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatchFilial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilialServiceServer).UpdatePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.FilialService/UpdatePatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilialServiceServer).UpdatePatch(ctx, req.(*UpdatePatchFilial))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilialService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilialPK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilialServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.FilialService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilialServiceServer).Delete(ctx, req.(*FilialPK))
	}
	return interceptor(ctx, in, info, handler)
}

// FilialService_ServiceDesc is the grpc.ServiceDesc for FilialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization_service.FilialService",
	HandlerType: (*FilialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FilialService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _FilialService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _FilialService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FilialService_Update_Handler,
		},
		{
			MethodName: "UpdatePatch",
			Handler:    _FilialService_UpdatePatch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FilialService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filial_service.proto",
}
