// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package organization_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MagazinServiceClient is the client API for MagazinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MagazinServiceClient interface {
	Create(ctx context.Context, in *CreateMagazin, opts ...grpc.CallOption) (*Magazin, error)
	GetByID(ctx context.Context, in *MagazinPK, opts ...grpc.CallOption) (*Magazin, error)
	GetList(ctx context.Context, in *GetListMagazinRequest, opts ...grpc.CallOption) (*GetListMagazinResponse, error)
	Update(ctx context.Context, in *UpdateMagazin, opts ...grpc.CallOption) (*Magazin, error)
	UpdatePatch(ctx context.Context, in *UpdatePatchMagazin, opts ...grpc.CallOption) (*Magazin, error)
	Delete(ctx context.Context, in *MagazinPK, opts ...grpc.CallOption) (*empty.Empty, error)
}

type magazinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMagazinServiceClient(cc grpc.ClientConnInterface) MagazinServiceClient {
	return &magazinServiceClient{cc}
}

func (c *magazinServiceClient) Create(ctx context.Context, in *CreateMagazin, opts ...grpc.CallOption) (*Magazin, error) {
	out := new(Magazin)
	err := c.cc.Invoke(ctx, "/organization_service.MagazinService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazinServiceClient) GetByID(ctx context.Context, in *MagazinPK, opts ...grpc.CallOption) (*Magazin, error) {
	out := new(Magazin)
	err := c.cc.Invoke(ctx, "/organization_service.MagazinService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazinServiceClient) GetList(ctx context.Context, in *GetListMagazinRequest, opts ...grpc.CallOption) (*GetListMagazinResponse, error) {
	out := new(GetListMagazinResponse)
	err := c.cc.Invoke(ctx, "/organization_service.MagazinService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazinServiceClient) Update(ctx context.Context, in *UpdateMagazin, opts ...grpc.CallOption) (*Magazin, error) {
	out := new(Magazin)
	err := c.cc.Invoke(ctx, "/organization_service.MagazinService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazinServiceClient) UpdatePatch(ctx context.Context, in *UpdatePatchMagazin, opts ...grpc.CallOption) (*Magazin, error) {
	out := new(Magazin)
	err := c.cc.Invoke(ctx, "/organization_service.MagazinService/UpdatePatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magazinServiceClient) Delete(ctx context.Context, in *MagazinPK, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/organization_service.MagazinService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagazinServiceServer is the server API for MagazinService service.
// All implementations must embed UnimplementedMagazinServiceServer
// for forward compatibility
type MagazinServiceServer interface {
	Create(context.Context, *CreateMagazin) (*Magazin, error)
	GetByID(context.Context, *MagazinPK) (*Magazin, error)
	GetList(context.Context, *GetListMagazinRequest) (*GetListMagazinResponse, error)
	Update(context.Context, *UpdateMagazin) (*Magazin, error)
	UpdatePatch(context.Context, *UpdatePatchMagazin) (*Magazin, error)
	Delete(context.Context, *MagazinPK) (*empty.Empty, error)
	mustEmbedUnimplementedMagazinServiceServer()
}

// UnimplementedMagazinServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMagazinServiceServer struct {
}

func (UnimplementedMagazinServiceServer) Create(context.Context, *CreateMagazin) (*Magazin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMagazinServiceServer) GetByID(context.Context, *MagazinPK) (*Magazin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedMagazinServiceServer) GetList(context.Context, *GetListMagazinRequest) (*GetListMagazinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedMagazinServiceServer) Update(context.Context, *UpdateMagazin) (*Magazin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMagazinServiceServer) UpdatePatch(context.Context, *UpdatePatchMagazin) (*Magazin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatch not implemented")
}
func (UnimplementedMagazinServiceServer) Delete(context.Context, *MagazinPK) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMagazinServiceServer) mustEmbedUnimplementedMagazinServiceServer() {}

// UnsafeMagazinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MagazinServiceServer will
// result in compilation errors.
type UnsafeMagazinServiceServer interface {
	mustEmbedUnimplementedMagazinServiceServer()
}

func RegisterMagazinServiceServer(s grpc.ServiceRegistrar, srv MagazinServiceServer) {
	s.RegisterService(&MagazinService_ServiceDesc, srv)
}

func _MagazinService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMagazin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazinServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.MagazinService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazinServiceServer).Create(ctx, req.(*CreateMagazin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazinService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MagazinPK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazinServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.MagazinService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazinServiceServer).GetByID(ctx, req.(*MagazinPK))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazinService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMagazinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazinServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.MagazinService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazinServiceServer).GetList(ctx, req.(*GetListMagazinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazinService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMagazin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazinServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.MagazinService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazinServiceServer).Update(ctx, req.(*UpdateMagazin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazinService_UpdatePatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatchMagazin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazinServiceServer).UpdatePatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.MagazinService/UpdatePatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazinServiceServer).UpdatePatch(ctx, req.(*UpdatePatchMagazin))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagazinService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MagazinPK)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagazinServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/organization_service.MagazinService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagazinServiceServer).Delete(ctx, req.(*MagazinPK))
	}
	return interceptor(ctx, in, info, handler)
}

// MagazinService_ServiceDesc is the grpc.ServiceDesc for MagazinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MagazinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "organization_service.MagazinService",
	HandlerType: (*MagazinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MagazinService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _MagazinService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _MagazinService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MagazinService_Update_Handler,
		},
		{
			MethodName: "UpdatePatch",
			Handler:    _MagazinService_UpdatePatch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MagazinService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magazin_service.proto",
}
